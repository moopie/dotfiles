"This must be first, because it changes other options as side effect
set nocompatible

" Change the mapleader from \ to ,
let mapleader=","

set hidden 	    " hides buffers instead of closing them
set nowrap	    " don't wrap lines
set expandtab   " use spaces instead of tabs
set tabstop=4	" a tab is 4 spaces
set backspace=indent,eol,start
		" allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set clipboard+=unnamed  " Yanks go on clipboard instead.
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set swapfile
set backup
set backupdir=~/.vim/tmp
set directory=~/.vim/tmp
set scrolloff=3
set encoding=utf8
set autochdir
set autoread

set showmatch       " Show matching brackets.
set matchtime=5     " Bracket blinking.
set novisualbell    " No blinking
set noerrorbells    " No noise.
set laststatus=2    " Always show status line.

set vb t_vb=        " disable any beeps or flashes on error
set ruler           " Show ruler
set showcmd         " Display an incomplete command in the lower right corner of the Vim window
set shortmess=atI   " Shortens messages"

set fo+=o " Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
set fo-=r " Do not automatically insert a comment leader after an enter
set fo-=t " Do no auto-wrap text using textwidth (does not apply to comments)"

" Folding
set foldenable          " Turn on folding
set foldmethod=marker   " Fold on the marker
set foldlevel=100       " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds "

" Mouse
set mouse-=a   " Disable mouse
set mousehide  " Hide mouse after chars typed

" Hilights
filetype indent plugin on
syntax on             " Enable syntax highlighting
filetype on           " Enable filetype detection

" Hilights whitespaces
"set list listchars=tab:>.,trail:.,extends:#,nbsp:.
" Paste mode for pasting large amounts of text
set pastetoggle=<F2>

" Hilight the current line
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Shortcut mappings

" Use Q for formatting the current paragraph (or selection)
vmap Q gq
nmap Q gqap

nnoremap j gj
nnoremap k gk

" Easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Cleans hilighted text after search
nmap <silent> ,/ :nohlsearch<CR>

" Lets you to :w!! if you forgot to sudo into a file
cmap w!! w !sudo tee % >/dev/null


" GUI
if has("gui_running")
    set anti enc=utf-8
    set guifont=Consolas\ 8
	set guioptions-=m  "remove menu bar
	set guioptions-=T  "remove toolbar
	set guioptions-=r  "remove right-hand scroll bar"
	set guioptions-=l
	set guioptions-=b
	set guioptions-=L
	set lines=60 columns=120
endif

" ctags
set tags+=./tags;$HOME " walk directory tree upto $HOME looking for tags"

"" Plugins

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
    " Required:
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/vimproc.vim', {
\ 'build' : {
\     'windows' : 'tools\\update-dll-mingw',
\     'cygwin' : 'make -f make_cygwin.mak',
\     'mac' : 'make -f make_mac.mak',
\     'linux' : 'make',
\     'unix' : 'gmake',
\    },
\ }

NeoBundle 'tpope/vim-fugitive'

NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}

NeoBundle 'Raimondi/delimitMate.git'

NeoBundle 'docunext/closetag.vim.git'

NeoBundle 'fholgado/minibufexpl.vim'
let g:miniBufExplorerAutoStart = 1

" General 
NeoBundle 'SirVer/ultisnips'

NeoBundle 'godlygeek/tabular'

" Python
NeoBundle 'klen/python-mode'
" Python-mode
" Activate rope
" Keys:
" K             Show python docs
"   Rope autocomplete
" g     Rope goto definition
" d     Rope show documentation
" f     Rope find occurrences
" b     Set, unset breakpoint (g:pymode_breakpoint enabled)
" [[            Jump on previous class or function (normal, visual, operator modes)
" ]]            Jump on next class or function (normal, visual, operator modes)
" [M            Jump on previous class or method (normal, visual, operator modes)
" ]M            Jump on next class or method (normal, visual, operator modes)
let g:pymode_rope = 0 " Use YouCompleteMe instead

" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'

"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1
" Support virtualenv
let g:pymode_virtualenv = 1

" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = 'b'

" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

" node
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'jelera/vim-javascript-syntax'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'nathanaelkane/vim-indent-guides'
au! BufNewFile,BufRead *.jade setf jade
NeoBundle 'myhere/vim-nodejs-complete'

" css
NeoBundle 'groenewege/vim-less'
au! BufNewFile,BufRead *.less setf less 
NeoBundle 'hail2u/vim-css3-syntax'

" haskell
NeoBundle 'dag/vim2hs'

" Syntax
NeoBundle 'scrooloose/syntastic'

" Utility
NeoBundle 'repeat.vim'

NeoBundle 'surround.vim'

NeoBundle 'Lokaltog/vim-easymotion'

" tComment
NeoBundle 'tComment'
nnoremap // :TComment<CR>
vnoremap // :TComment<CR>

NeoBundle 'scrooloose/nerdtree'
nnoremap <leader>t :NERDTreeToggle<CR>
if has('autocmd')
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
endif

NeoBundle 'majutsushi/tagbar.git'
let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>

" ag, the silver searcher
NeoBundle 'rking/ag.vim'

" Colorschemes
NeoBundle 'flazz/vim-colorschemes'

NeoBundle 'Lokaltog/vim-powerline'

NeoBundle 'Shougo/unite.vim'
nnoremap <C-p> :Unite file_rec/async<cr>
nnoremap <space>/ :Unite grep:.<cr>
let g:unite_source_history_yank_enable = 1
if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = ''
endif
nnoremap <space>y :Unite history/yank<cr>
nnoremap <space>s :Unite -quick-match buffer<cr>

NeoBundle 'Shougo/neocomplete.vim'
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Visual Studio
NeoBundle 'nosami/Omnisharp'
NeoBundle 'OrangeT/vim-csharp'
NeoBundle 'TFS'

call neobundle#end()

colorscheme jellybeans
