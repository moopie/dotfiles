"This must be first, because it changes other options as side effect
set nocompatible
set background=dark

let mapleader=","

" Windows specific stuff
if has('win32')
    behave mswin
    set term=xterm
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    " set rtp for windows because it is not set to the place we want
    set rtp+=~/.vim/
endif

" GUI
if has("gui_running")
    set anti enc=utf-8
    if has('win32')
        set guifont=Consolas:h9
    else
        set guifont=SourceCodePro\ 9
    endif
    set guioptions-=m  " Remove menu bar
    set guioptions-=T  " Remove toolbar
    set guioptions-=r  " Remove right-hand scroll bar
    set guioptions-=l
    set guioptions-=b
    set guioptions-=L
    au GUIEnter * set vb t_vb=
endif

" Properties
set number          " Show line numbers
set encoding=utf8   " Use UTF8 everywhere
set showcmd         " Display an incomplete command in the lower right corner of the Vim window
set shortmess=atI   " Shortens messages
set showmatch       " Show matching brackets
set cmdheight=2     " Cmd line should take 2 lines
set ruler           " Show ruler
set cursorline      " Highlight current line
set lazyredraw      " Redraw only when we need to
set laststatus=2    " Always show status line

" Project-specific vimrc
set exrc            " Enable external vimrc
set secure          " Prevent external vimrc from using dangerous commands

" Invisible chars
set listchars=tab:▸\ ,eol:¬,trail:·

" Command menu autocompletion
set wildmenu                " Enable it
set wildignorecase          " Who needs case anyways
set wildmode=list:full,full " Wildmenu display options

" Highlight 81th column
set colorcolumn=81
hi ColorColumn guibg=#2d2d2d ctermbg=246

" Tabs & Spaces
set expandtab     " Use spaces instead of tabs
set tabstop=4     " A tab is 4 spaces
set autoindent    " Always set autoindenting on
set copyindent    " Copy the previous indentation on autoindenting
set shiftwidth=4  " Number of spaces to use for autoindenting
set smarttab      " Insert tabs on the start of a line according to shiftwidth, not tabstop

" Search
set ignorecase    " Ignore case when searching
set smartcase     " Ignore case if search pattern is all lowercase, case-sensitive otherwise
set hlsearch      " Highlight search terms
set incsearch     " Show search matches as you type

" Autosave
set swapfile
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/temp

" No annoyances
set novisualbell    " No blinking
set noerrorbells    " No noise
set vb t_vb=        " Disable any beeps or flashes on error

" Folding
set foldenable          " Enable folding
set foldmethod=indent   " Fold by indent
set foldlevelstart=20   " Don't automatically fold opened files

" Mouse
set mouse=a     " Disable mouse
set mousehide   " Hide mouse after chars typed

" Functions

function! NumberToggle()
    if(&relativenumber == 1)
        set norelativenumber
    else
        set relativenumber
    endif
endfunc

function! ListToggle()
    if(&list == 1)
        set nolist
    else
        set list
    endif
endfunc

" Mappings

" Activate NumberToggle
nmap <silent> <leader>n :call NumberToggle()<CR>

" Activate ListToggle
nmap <silent> <leader>l :call ListToggle()<CR>

" Cleans hilighted text after search
nmap <silent> <leader>/ :nohlsearch<CR>

" Window movement
nmap <C-H> <C-W>h
nmap <C-J> <C-W>j
nmap <C-K> <C-W>k
nmap <C-L> <C-W>l

" Plugins
call plug#begin('~/.vim/plugins')

" General
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dispatch'
Plug 'bling/vim-airline'
let g:airline_powerline_fonts=1
Plug 'Raimondi/delimitMate'

" Project management
Plug 'scrooloose/nerdtree'
nmap <leader>o :NERDTreeToggle<CR>
Plug 'Shougo/unite.vim'
nmap <C-P> :Unite file_rec<CR>
nmap <leader>b :Unite buffer<CR>
Plug 'mileszs/ack.vim'
if executable('ag') " Use ag when available
    let g:ackprg='ag --vimgrep'
endif

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Undo history
Plug 'sjl/gundo.vim'
nmap <leader>u :GundoToggle<CR>
let g:gundo_width=60
let g:gundo_right=1

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" Comments
Plug 'scrooloose/nerdcommenter'

" Linter
Plug 'scrooloose/syntastic'

" Tagbar
Plug 'majutsushi/tagbar'
nmap <leader>t :TagbarToggle<CR>

" Autocompletion
Plug 'Valloric/YouCompleteMe', {
\    'do': './install.py'
\               . ' --omnisharp-completer'
\               . ' --clang-completer'
\}

" Languages

" HTML
Plug 'mattn/emmet-vim'

" Python
Plug 'davidhalter/jedi-vim'

" CSharp
Plug 'OrangeT/vim-csharp'
Plug 'OmniSharp/omnisharp-vim'

" C/C++
Plug 'vim-scripts/a.vim'

" JavaScript
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'burnettk/vim-angular'

" SQL
Plug 'vim-scripts/SQLComplete.vim'

" Colorschemes
Plug 'nanotech/jellybeans.vim'

call plug#end()

" set syntax on after vim-plug does it's thing
filetype plugin indent on
syntax on " Enable syntax highlighting

colorscheme jellybeans
