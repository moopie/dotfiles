"This must be first, because it changes other options as side effect
set nocompatible
set background=dark

if has('win32')
    behave mswin
    set term=xterm
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    " set rtp for windows because it is not set to the place we want
    set rtp+=~/.vim/
endif

" Change the mapleader from \ to ,
let mapleader=","

set hidden 	    " hides buffers instead of closing them
set nowrap	    " don't wrap lines
set expandtab   " use spaces instead of tabs
set tabstop=4	" a tab is 4 spaces
set backspace=indent,eol,start
		" allow backspacing over everything in insert mode
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set number        " always show line numbers
set clipboard+=unnamed  " Yanks go on clipboard instead.
set shiftwidth=4  " number of spaces to use for autoindenting
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  "    case-sensitive otherwise
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set hlsearch      " highlight search terms
set incsearch     " show search matches as you type
set history=1000         " remember more commands and search history
set undolevels=1000      " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                " change the terminal's title
set swapfile
set backup
set backupdir=~/.vim/backup
set directory=~/.vim/tmp
set scrolloff=3
set encoding=utf8
set autoread

set showmatch       " Show matching brackets.
set matchtime=5     " Bracket blinking.
set novisualbell    " No blinking
set noerrorbells    " No noise.
set laststatus=2    " Always show status line.

set vb t_vb=        " disable any beeps or flashes on error
set ruler           " Show ruler
set showcmd         " Display an incomplete command in the lower right corner of the Vim window
set shortmess=atI   " Shortens messages

set fo+=o " Automatically insert the current comment leader after hitting 'o' or 'O' in Normal mode.
set fo-=r " Do not automatically insert a comment leader after an enter
set fo-=t " Do no auto-wrap text using textwidth (does not apply to comments)"

" Folding
set foldenable          " Turn on folding
set foldmethod=marker   " Fold on the marker
set foldlevel=100       " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,mark,percent,quickfix,tag " what movements open folds "

" Mouse
set mouse-=a   " Disable mouse
set mousehide  " Hide mouse after chars typed

" Hilights whitespaces
"set list listchars=tab:>.,trail:.,extends:#,nbsp:.

" GUI
if has("gui_running")
    set anti enc=utf-8
    set guifont=Consolas\ 9
	set guioptions-=m  "remove menu bar
	set guioptions-=T  "remove toolbar
	set guioptions-=r  "remove right-hand scroll bar"
	set guioptions-=l
	set guioptions-=b
	set guioptions-=L
	set lines=60 columns=120
endif

" Hilight the current line
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END


" create a relative number/absolute line number switch
" this requires vim 7.3 and silently does nothing when
" rnu is not available
function!g:ToggleNuMode()
    if exists("&rnu")
        if(&rnu==1)
            set nornu
        else
            set rnu
        endif
    endif
endfunc

" Shortcut mappings

" Easy window navigation
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l

" Cleans hilighted text after search
nmap <silent> ,/ :nohlsearch<CR>

map <F3> :call g:ToggleNuMode()<CR>

nnoremap <c-f> :Ag<space>

"" Plugins

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'

Plug 'docunext/closetag.vim'

" Syntax
Plug 'scrooloose/syntastic'

" Utility
Plug 'tpope/vim-repeat'

Plug 'tpope/vim-surround'

" NERDCommenter
Plug 'scrooloose/nerdcommenter'

Plug 'scrooloose/nerdtree'
nnoremap <leader>t :NERDTreeToggle<CR>
if has('autocmd')
	autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
endif

" ag, the silver searcher
Plug 'rking/ag.vim'

" Colorschemes
Plug 'flazz/vim-colorschemes'

Plug 'Lokaltog/vim-powerline'

Plug 'kien/ctrlp.vim'
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>p :CtrlPMixed<CR>

Plug 'tpope/vim-dispatch'

Plug 'fholgado/minibufexpl.vim'

Plug 'OmniSharp/omnisharp-vim'
let g:OmniSharp_selector_ui = 'ctrlp'
" Get Code Issues and syntax errors
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']

" Bindings
augroup omnisharp_commands
    autocmd!
    " Synchronous build (blocks Vim)
    "autocmd FileType cs nnoremap <F5> :wa!<cr>:OmniSharpBuild<cr>
    " Builds can also run asynchronously with vim-dispatch installed
    autocmd FileType cs nnoremap <leader>b :wa!<cr>:OmniSharpBuildAsync<cr>
    " automatic syntax check on events (TextChanged requires Vim 7.4)
    autocmd BufEnter,TextChanged,InsertLeave *.cs SyntasticCheck

    " Automatically add new cs files to the nearest project on save
    autocmd BufWritePost *.cs call OmniSharp#AddToProject()

    "show type information automatically when the cursor stops moving
    autocmd CursorHold *.cs call OmniSharp#TypeLookupWithoutDocumentation()

    "The following commands are contextual, based on the current cursor position.

    autocmd FileType cs nnoremap gd :OmniSharpGotoDefinition<cr>
    autocmd FileType cs nnoremap <leader>fi :OmniSharpFindImplementations<cr>
    autocmd FileType cs nnoremap <leader>ft :OmniSharpFindType<cr>
    autocmd FileType cs nnoremap <leader>fs :OmniSharpFindSymbol<cr>
    autocmd FileType cs nnoremap <leader>fu :OmniSharpFindUsages<cr>
    "finds members in the current buffer
    autocmd FileType cs nnoremap <leader>fm :OmniSharpFindMembers<cr>
    " cursor can be anywhere on the line containing an issue
    autocmd FileType cs nnoremap <leader>x  :OmniSharpFixIssue<cr>
    autocmd FileType cs nnoremap <leader>fx :OmniSharpFixUsings<cr>
    autocmd FileType cs nnoremap <leader>tt :OmniSharpTypeLookup<cr>
    autocmd FileType cs nnoremap <leader>dc :OmniSharpDocumentation<cr>
    "navigate up by method/property/field
    autocmd FileType cs nnoremap <C-K> :OmniSharpNavigateUp<cr>
    "navigate down by method/property/field
    autocmd FileType cs nnoremap <C-J> :OmniSharpNavigateDown<cr>

augroup END

" Contextual code actions (requires CtrlP or unite.vim)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog
nnoremap <leader>nm :OmniSharpRename<cr>
nnoremap <F2> :OmniSharpRename<cr>
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution
nnoremap <leader>ss :OmniSharpStartServer<cr>
nnoremap <leader>sp :OmniSharpStopServer<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>

Plug 'OrangeT/vim-csharp'

Plug 'majutsushi/tagbar'

Plug 'SirVer/ultisnips'
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

Plug 'honza/vim-snippets'

Plug 'Valloric/YouCompleteMe'

call plug#end()

" set syntax on after neobundle does it's thing
filetype plugin indent on
syntax on " Enable syntax highlighting

colorscheme jellybeans
